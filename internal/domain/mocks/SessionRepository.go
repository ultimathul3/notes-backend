// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/ultimathul3/notes-backend/internal/domain"

	uuid "github.com/google/uuid"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, session
func (_m *SessionRepository) Create(ctx context.Context, session domain.Session) (int64, error) {
	ret := _m.Called(ctx, session)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Session) (int64, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Session) int64); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllByUserID provides a mock function with given fields: ctx, userID
func (_m *SessionRepository) DeleteAllByUserID(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *SessionRepository) DeleteByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *SessionRepository) GetByRefreshToken(ctx context.Context, refreshToken uuid.UUID) (domain.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(domain.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountByUserID provides a mock function with given fields: ctx, userID
func (_m *SessionRepository) GetCountByUserID(ctx context.Context, userID int64) int64 {
	ret := _m.Called(ctx, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, input
func (_m *SessionRepository) Update(ctx context.Context, input domain.UpdateSessionDTO) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateSessionDTO) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSessionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionRepository(t mockConstructorTestingTNewSessionRepository) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
